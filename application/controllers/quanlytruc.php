<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');class Quanlytruc extends CI_Controller {		function __construct()	{		parent::__construct();		//$this->load->helper(array('form'));		$this->clientip = $_SERVER['REMOTE_ADDR'];		$this->load->library('form_validation');		$this->load->helper("security"); //could make it slow?	}		public function index()	{			//$this->load->library('form_validation');		//print_r($this->quanlytruc_model->login('loitd', '123456'));		//print_r($this->session->userdata('logged_in'));		if($this->session->userdata('logged_in'))		{			$session_data = $this->session->userdata('logged_in');			$data['username'] = $session_data['username'];						$this->load->model('quanlytruc_model');			$data['services'] = $this->quanlytruc_model->getServices();			$data['submit_result'] = "Insert data and press submit button.";			//set_rules(field, label, rules)			$this->form_validation->set_rules('error_desc', 'error_desc', 'trim|required|xss_clean');			$this->form_validation->set_rules('service_name', 'service_name', 'trim|required|xss_clean');			$this->form_validation->set_rules('error_code', 'error_code', 'trim|required|xss_clean');			$this->form_validation->set_rules('solution_desc', 'solution_desc', 'trim|required|xss_clean');			$this->form_validation->set_rules('error_time', 'error_time', 'trim|required|xss_clean');			$this->form_validation->set_rules('solution_time', 'solution_time', 'trim|required|xss_clean');						if($this->form_validation->run() == FALSE)			{				$this->load->view('quanlytruc_view', array('data'=>$data));			} else {				$username = $data['username'];				$service_name = $this->input->post('service_name');				$error_code = $this->input->post('error_code');				$error_desc = $this->input->post('error_desc');				$solution_desc = $this->input->post('solution_desc');				$error_time = $this->input->post('error_time');				$solution_time = $this->input->post('solution_time');								//error_time and id will be inserted in model with FALSE params				//htmlspecialchars to ensure you dont kick my ass				$data2insert = array(					'username'=>$username,					'service_name'=>htmlspecialchars($service_name, ENT_QUOTES, 'utf-8'),					'error_code'=>htmlspecialchars($error_code, ENT_QUOTES, 'utf-8'),					//'error_code'=>xss_clean($error_code),					'error_desc'=>htmlspecialchars($error_desc, ENT_QUOTES, 'utf-8'),					'solution_desc'=>htmlspecialchars($solution_desc, ENT_QUOTES, 'utf-8'),					'solution_time'=>(float)htmlspecialchars($solution_time, ENT_QUOTES, 'utf-8'),					'status'=>'PENDING'	//all trans default pending				);				try{					$this->quanlytruc_model->addBaocao($data2insert, $error_time);					$data['submit_result'] = "Data validated and submited successfully.";				} catch(Exception $e){					$data['submit_result'] = "Error occured.";				}				//var_dump($error_code);				$this->load->view('quanlytruc_view', array('data'=>$data));			}							} else {			//If no session, redirect to login page			redirect('quanlytruc/login', 'refresh');		}			}		public function login()	{		$this->load->library('form_validation');		$this->form_validation->set_rules('username', 'Username', 'trim|required|xss_clean');		$this->form_validation->set_rules('password', 'Password', 'trim|required|xss_clean|callback_check_database');		if($this->form_validation->run() == FALSE)		{		//Field validation failed.  User redirected to login page			$this->load->view('quanlytruc_login_view');		}		else		{		//Go to private area			redirect('quanlytruc/index', 'refresh');		}	}		public function logout()	{		$this->session->unset_userdata('logged_in');		$this->session->unset_userdata('search_creds');		session_destroy();		redirect('quanlytruc/login', 'refresh');	}		public function register()	{		if($this->session->userdata('logged_in'))		{			$session_data = $this->session->userdata('logged_in');			$data['username'] = $session_data['username'];			$data['submit_result'] = "Điền thông tin và click.";			if($data['username'] == "loitd")			{				//set_rules(field, label, rules)				$this->form_validation->set_rules('username', 'Username', 'trim|required|xss_clean|is_unique[tbl_qlt_user.username]');				$this->form_validation->set_rules('fullname', 'Fullname', 'trim|required|xss_clean');				$this->form_validation->set_rules('password', 'Password', 'trim|required|xss_clean');				if($this->form_validation->run() == FALSE)				{					$this->load->view('quanlytruc_register_view', array('data'=>$data));				} else {					$username = $this->input->post('username');					$username = htmlspecialchars($username, ENT_QUOTES, 'utf-8');					$fullname = $this->input->post('fullname');					$password = $this->input->post('password');					$data2insert = array(					'username'=>$username,					'fullname'=>$fullname,					'password'=>$password);										$this->load->model('quanlytruc_model');					$this->quanlytruc_model->addUser($data2insert);					$data['submit_result'] = "Thông tin đã được ghi nhận.";					$this->load->view('quanlytruc_register_view', array('data'=>$data));				}			} else {				redirect('quanlytruc/index', 'refresh');			}		} else {			//If no session, redirect to login page			redirect('quanlytruc/login', 'refresh');		}	}		public function tonghop()	{		//print_r("FUck");		if($this->session->userdata('logged_in'))		{			$this->load->model('quanlytruc_model');			$session_data = $this->session->userdata('logged_in');			$data['username'] = $session_data['username'];			$data['from_date'] = $this->session->userdata('search_creds')['from_date'];			//print_r($data['from_date']);			$data['to_date'] = $this->session->userdata('search_creds')['to_date'];			$data['selected_user'] = $this->session->userdata('search_creds')['selected_user'];			$data['service_name'] = $this->session->userdata('search_creds')['service_name'];						$data['services'] = $this->quanlytruc_model->getServices();			$data['users'] = $this->quanlytruc_model->getUsers();			$data['submit_result'] = "Insert data and press submit button.";			$data['total_hours'] = 0;			$data['detail'] = "";			//set_rules(field, label, rules)			$this->form_validation->set_rules('from_date', 'from_date', 'trim|required|xss_clean');			$this->form_validation->set_rules('to_date', 'to_date', 'trim|required|xss_clean');			$this->form_validation->set_rules('service_name', 'service_name', 'trim|required|xss_clean');			$this->form_validation->set_rules('user_name', 'user_name', 'trim|required|xss_clean');						if($this->form_validation->run() == FALSE)			{				$this->load->view('quanlytruc_tonghop_view', array('data'=>$data));			} else {				$username = $data['username'];				$from_date = $this->input->post('from_date');				$to_date = $this->input->post('to_date');				$service_name = $this->input->post('service_name');				$user_name = $this->input->post('user_name');				//var_dump($from_date);								try{					//$this->load->model('quanlytruc_model');					//$this->quanlytruc_model->addBaocao($data2insert, $error_time);										/*now save search creds to sessions*/					$sess_array = array('from_date' => $from_date, 'to_date'=>$to_date, 'selected_user'=>$user_name, 'service_name'=>$service_name);					$this->session->set_userdata('search_creds', $sess_array);					//var_dump($sess_array);					$data['total_hours'] = $this->quanlytruc_model->getTotalHours($from_date, $to_date, $service_name, $user_name);					$data['detail'] = $this->quanlytruc_model->getDetailReport($from_date, $to_date, $service_name, $user_name);					$data['submit_result'] = "Data validated and submited successfully.";				} catch(Exception $e){					$data['submit_result'] = "Error occured.";				}				//var_dump($error_code);				//print_r($data['from_date']);				//reload the data				$data['from_date'] = $this->session->userdata('search_creds')['from_date'];				$data['to_date'] = $this->session->userdata('search_creds')['to_date'];				$data['selected_user'] = $this->session->userdata('search_creds')['selected_user'];				$data['service_name'] = $this->session->userdata('search_creds')['service_name'];				$this->load->view('quanlytruc_tonghop_view', array('data'=>$data));			}					} else {			//If no session, redirect to login page			redirect('quanlytruc/login', 'refresh');		}			}			public function export()	{		if($this->session->userdata('logged_in'))		{			$session_data = $this->session->userdata('logged_in');			$data['username'] = $session_data['username'];			$data['from_date'] = $this->session->userdata('search_creds')['from_date'];			//print_r($data['from_date']);			$data['to_date'] = $this->session->userdata('search_creds')['to_date'];						$data['detail'] = "";			$this->load->view('quanlytruc_export_view', array('data'=>$data));		} else {			//If no session, redirect to login page			redirect('quanlytruc/login', 'refresh');		}	}		public function toexcel()	{		if($this->session->userdata('logged_in'))		{			$session_data = $this->session->userdata('logged_in');			$data['username'] = $session_data['username'];			$data['from_date'] = $this->session->userdata('search_creds')['from_date'];			//print_r($data['from_date']);			$data['to_date'] = $this->session->userdata('search_creds')['to_date'];						$this->form_validation->set_rules('from_date', 'from_date', 'trim|required|xss_clean');			$this->form_validation->set_rules('to_date', 'to_date', 'trim|required|xss_clean');			if($this->form_validation->run() == FALSE)			{				$this->load->view('quanlytruc_export_view', array('data'=>$data));			} else {				$from_date = $this->input->post('from_date');				$to_date = $this->input->post('to_date');				$data['from_date'] = $from_date;				$data['to_date'] = $to_date;								$this->load->model('quanlytruc_model');				$data['detail'] = $this->quanlytruc_model->getExportData($from_date, $to_date);								$whattodo = $this->input->post('submit');				if($whattodo == 'Search')				{					$this->load->view('quanlytruc_export_view', array('data'=>$data));				} else {					$this->load->view('quanlytruc_2excel_view', array('data'=>$data));				}											}					} else {			//If no session, redirect to login page			redirect('quanlytruc/login', 'refresh');		}					}			public function check_database($password)	{		$this->load->model('quanlytruc_model');		$username = $this->input->post('username');		$username = htmlspecialchars($username, ENT_QUOTES, 'utf-8');		$result = $this->quanlytruc_model->login($username, $password);		if($result)		{			$sess_array = array('username' => $result['USERNAME']);			$this->session->set_userdata('logged_in', $sess_array);			return true;		} else 		{			$this->form_validation->set_message('check_database', 'Invalid username or password');			return false;		}	}		public function confirm($id, $status){		echo $id . $status;		if($this->session->userdata('logged_in'))		{			$session_data = $this->session->userdata('logged_in');			$data['username'] = $session_data['username'];			$data['submit_result'] = "Điền thông tin và click.";			if($data['username'] == "loitd" || $data['username'] == "tupn")			{				$this->load->model('quanlytruc_model');				$this->quanlytruc_model->updateStatus($id, $status);				$this->load->view('quanlytruc_success_view', array('data'=>$data));			} else {				$this->load->view('quanlytruc_fail_view', array('data'=>$data));			}		}	}																				}